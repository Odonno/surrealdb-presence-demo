{"schemas":"--- original\n+++ modified\n@@ -1,20 +1,45 @@\n+DEFINE TABLE last_presence AS\r\n+\tSELECT\r\n+        user,\r\n+        time::max(updated_at) AS at\r\n+    FROM presence\r\n+\tGROUP BY user\r\n+PERMISSIONS \r\n+    FOR select FULL\r\n+    FOR create, update, delete NONE;\n+DEFINE TABLE message SCHEMAFULL\r\n+    PERMISSIONS\r\n+        FOR select FULL\r\n+        FOR create WHERE user == $auth.id\r\n+        FOR update, delete NONE;\r\n+\r\n+DEFINE FIELD room ON message TYPE record<room>;\r\n+DEFINE FIELD author ON message TYPE option<record<user>>;\r\n+DEFINE FIELD content ON message TYPE option<string>;\r\n+DEFINE FIELD type ON message TYPE string ASSERT $value IN [\"ENTER_ROOM\", \"LEAVE_ROOM\", \"TEXT_MESSAGE\"];\r\n+DEFINE FIELD created_at ON message TYPE datetime DEFAULT time::now();\n+DEFINE FUNCTION fn::create_passcode($value: string) {\r\n+\tRETURN string::slice(crypto::sha1($value), 0, 6);\r\n+};\n DEFINE TABLE presence SCHEMAFULL\r\n     PERMISSIONS\r\n-        FOR select\r\n-        FOR create, update WHERE user.id = $auth.id\r\n+        FOR select FULL\r\n+        FOR create, update WHERE user == $auth.id\r\n         FOR delete NONE;\r\n \r\n-DEFINE FIELD room ON presence TYPE record<room>;\r\n DEFINE FIELD user ON presence TYPE record<user>;\r\n-DEFINE FIELD updated_at ON presence TYPE datetime VALUE time::now() DEFAULT time::now();\r\n-DEFINE FIELD status ON presence TYPE string ASSERT $value IN [\"joined\", \"left\"] DEFAULT \"joined\";\n+DEFINE FIELD updated_at ON presence TYPE datetime VALUE time::now() DEFAULT time::now();\n DEFINE TABLE room SCHEMAFULL\r\n     PERMISSIONS\r\n-        FOR select\r\n+        FOR select FULL\r\n         FOR create, update, delete NONE;\r\n \r\n DEFINE FIELD name ON room TYPE string;\r\n-DEFINE FIELD created_at ON room TYPE datetime DEFAULT time::now();\n+DEFINE FIELD owner ON room TYPE option<record<user>>;\r\n+DEFINE FIELD users ON room TYPE set<record<user>> DEFAULT [];\r\n+DEFINE FIELD created_at ON room TYPE datetime DEFAULT time::now();\r\n+\r\n+DEFINE INDEX unique_name ON room COLUMNS name UNIQUE;\n DEFINE TABLE script_migration SCHEMAFULL\n     PERMISSIONS\n         FOR select FULL\n@@ -25,12 +50,14 @@\n DEFINE TABLE user SCHEMALESS\r\n     PERMISSIONS\r\n         FOR select FULL\r\n-        FOR update WHERE id = $auth.id\r\n+        FOR update WHERE id == $auth.id\r\n         FOR create, delete NONE;\r\n \r\n DEFINE FIELD username ON user TYPE string;\r\n-DEFINE FIELD email ON user TYPE string;\r\n-DEFINE FIELD password ON user TYPE string;\r\n+DEFINE FIELD email ON user TYPE string PERMISSIONS FOR select NONE;\r\n+DEFINE FIELD passcode ON user TYPE string PERMISSIONS FOR select NONE;\r\n+DEFINE FIELD registered_at ON user TYPE datetime DEFAULT time::now();\r\n+DEFINE FIELD avatar ON user TYPE option<string>;\r\n \r\n DEFINE INDEX unique_username ON user COLUMNS username UNIQUE;\r\n DEFINE INDEX unique_email ON user COLUMNS email UNIQUE;\r\n@@ -40,12 +67,13 @@\n     SIGNUP (\r\n         CREATE user\r\n         SET\r\n-            name = $name,\r\n+            username = $username,\r\n             email = $email,\r\n-            password = crypto::argon2::generate($password)\r\n+            avatar = \"https://www.gravatar.com/avatar/\" + crypto::md5($email),\r\n+            passcode = fn::create_passcode($email)\r\n     )\r\n     SIGNIN (\r\n         SELECT *\r\n         FROM user\r\n-        WHERE email = $email AND crypto::argon2::compare(password, $password)\r\n+        WHERE email = $email AND passcode = $passcode\r\n     );\r\n","events":"--- original\n+++ modified\n@@ -1,37 +1,98 @@\n-DEFINE TABLE join_room SCHEMALESS;\n+DEFINE TABLE create_room SCHEMALESS\r\n+    PERMISSIONS \r\n+        FOR create WHERE $auth\r\n+        FOR select, update, delete NONE;\r\n+\r\n+DEFINE EVENT create_room ON TABLE create_room WHEN $event == \"CREATE\" THEN {\r\n+    LET $rooms = (\r\n+        SELECT * \r\n+        FROM room \r\n+        WHERE owner == $auth.id\r\n+    );\r\n+\r\n+    LET $is_room_already_created = count($rooms) > 0;\r\n+\r\n+    IF $is_room_already_created THEN\r\n+    {\r\n+        THROW \"You cannot create more than one room.\";\r\n+    }\r\n+    ELSE\r\n+    {\r\n+        LET $room_name = \"@\" + $auth.username + \"'s room\";\r\n+        LET $new_rooms = CREATE room SET name = $room_name, owner = $auth.id, users = [$auth.id];\r\n+        LET $own_room = $new_rooms[0];\r\n+        CREATE presence SET user = $auth.id;\r\n+        CREATE message SET room = $own_room.id, author = $auth.id, type = \"ENTER_ROOM\";\r\n+    }\r\n+    END;\r\n+};\n+DEFINE TABLE join_room SCHEMALESS\n+    PERMISSIONS \n+        FOR create WHERE $auth\n+        FOR select, update, delete NONE;\n\n DEFINE FIELD room_id ON join_room TYPE record<room>;\n\n DEFINE EVENT join_room ON TABLE join_room WHEN $event == \"CREATE\" THEN {\n-    LET $presence = \n-        SELECT * FROM presence \n-        WHERE room = $after.room_id AND user = $auth.id;\n+    LET $users = SELECT VALUE users FROM ONLY $after.room_id;\n+    LET $is_in_room = RETURN $auth.id IN $users;\n\n-    IF count($presence) == 0 THEN\n-        ( CREATE presence WHERE room = $after.room_id AND user = $auth.id )\n+    IF $is_in_room THEN\n+    {\n+        THROW \"You are already in this room\";\n+    }\n     ELSE\n-        ( UPDATE presence SET status = \"joined\" WHERE room = $after.room_id AND user = $auth.id )\n-    END\n+    {\n+        UPDATE $after.room_id SET users += [$auth.id];\n+        CREATE presence SET user = $auth.id;\n+        CREATE message SET room = $after.room_id, author = $auth.id, type = \"ENTER_ROOM\";\n+    }\n+    END;\n };\n-DEFINE TABLE leave_room SCHEMALESS;\n+DEFINE TABLE leave_room SCHEMALESS\n+    PERMISSIONS \n+        FOR create WHERE $auth\n+        FOR select, update, delete NONE;\n\n DEFINE FIELD room_id ON leave_room TYPE record<room>;\n\n DEFINE EVENT leave_room ON TABLE leave_room WHEN $event == \"CREATE\" THEN {\n-    LET $presence = \n-        SELECT * FROM presence \n-        WHERE room = $after.room_id AND user = $auth.id;\n+    LET $users = SELECT VALUE users FROM ONLY $after.room_id;\n+    LET $is_in_room = RETURN $auth.id IN $users;\n\n-    IF count($presence) == 0 THEN\n-        ERROR \"You are not in this room\";\n+    IF $is_in_room THEN\n+    {\n+        UPDATE $after.room_id SET users -= [$auth.id];\n+        CREATE presence SET user = $auth.id;\n+        CREATE message SET room = $after.room_id, author = $auth.id, type = \"LEAVE_ROOM\";\n+    }\n     ELSE\n-        ( UPDATE presence SET status = \"left\" WHERE room = $after.room_id AND user = $auth.id )\n-    END\n+    {\n+        THROW \"You are not in this room\";\n+    }\n+    END;\n+};\n+DEFINE TABLE send_message SCHEMALESS\r\n+    PERMISSIONS \r\n+        FOR create WHERE $auth\r\n+        FOR select, update, delete NONE;\r\n+\r\n+DEFINE FIELD room_id ON join_room TYPE record<room>;\r\n+DEFINE FIELD content ON send_message TYPE string;\r\n+\r\n+DEFINE EVENT send_message ON TABLE send_message WHEN $event == \"CREATE\" THEN {\r\n+    CREATE message\r\n+    SET \r\n+        room = $after.room_id, \r\n+        author = $auth.id, \r\n+        type = \"TEXT_MESSAGE\", \r\n+        content = $after.content;\r\n };\n-DEFINE TABLE signal_presence SCHEMALESS;\n-\n-DEFINE FIELD room_id ON signal_presence TYPE record<room>;\n+DEFINE TABLE signal_presence SCHEMALESS\n+    PERMISSIONS \n+        FOR create WHERE $auth\n+        FOR select, update, delete NONE;\n\n DEFINE EVENT signal_presence ON TABLE signal_presence WHEN $event == \"CREATE\" THEN (\n-    UPDATE presence SET status = \"joined\" WHERE room = $after.room_id AND user = $auth.id\n+    CREATE presence SET user = $auth.id\n );\n\\ No newline at end of file\n"}